# The Swagger specification file

# The version of Swagger, for now, it should be `2.0`.
swagger: "2.0"


info:
  title: "~TYCNCUCSC TABALL API~"
  version: "0.1"
  description: |
    The API of the backend of **~TYCNCUCSC TABALL PROJECT~**.

    - <font color="red">**WARNING**</font>:
      This API is still in developing.
      This is not the final completed product.

      THE ETERNAL DEVELOPING!
      THE EVERLASTING BUGS!
      THE PERMANENT PAIN!
      THE FOREVER WORK!
  contact:
    name: "Website Coming Soon..."
    url: "#"
    # email: ""


externalDocs:
  description: "Docs Coming Soon..."
  url: "#"


# host: "wasabi-neko.tw:3000"
host: "localhost:3000"
basePath: "/api/v0"


security:
  - APIUserID: []
    APIUserKey: []


schemes:
  - "http"


consumes:
  - "application/json"
produces:
  - "application/json"


tags:
  - name: "General"
    description: "General operations of this API"

  - name: "Tables"
    description: "Records of table-tennis tables"


paths:
  /:
    get:  # TODO: all?
      tags:
        - "General"
      summary: ""
      description: ""
      operationId: ""
      responses:
        200:
          description: "Successful operation"

  /tables:
    get:
      tags:
        - "Tables"
      summary: "Get all table records"
      description: "Get table records of all tables in an array once."
      operationId: ""  # TODO:
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/TableRecord"

    patch:
      tags:
        - "Tables"
      summary: "Patch table records"
      description: "Patch table records of some tables in an array once."
      operationId: ""  # TODO:
      parameters:
        - $ref: "#/parameters/tableRecords"
      responses:
        200:
          description: "Successful operation"

  /tables/{tableID}:
    get:
      tags:
        - "Tables"
      summary: "Get a table record by ID"
      description: "Get a table record by its table ID."
      operationId: ""  # TODO:
      parameters:
        - $ref: "#/parameters/tableID"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TableRecord"
        404:
          description: "Table not found"

    patch:
      tags:
        - "Tables"
      summary: "Patch a table record by ID"
      description: "Patch a table record by its table ID."
      operationId: ""  # TODO:
      parameters:
        - $ref: "#/parameters/tableRecord"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/TableRecord"
        404:
          description: "Table not found"


definitions:
  TableRecord:
    type: "object"  
    properties:
      tableID:
        type: "integer"
        format: "int32"
      isOccupied:
        type: "boolean"


parameters:
  tableID:
    name: "tableID"
    description: "The ID of the table."
    required: true
    in: "path"
    type: "integer"
    format: "int32"

  tableRecord:
    name: "tableRecord"
    description: "The record of the table."
    required: true
    in: "body"
    schema:
      $ref: "#/definitions/TableRecord"
  
  tableRecords:
    name: "tableRecords"
    description: "The records of the tables."
    required: true
    in: "body"
    schema:
      type: "array"
      items:
        $ref: "#/definitions/TableRecord"


responses:  # TODO: 401, 404


securityDefinitions:
  APIUserID:
    name: "authorization-id"
    description: "The ID of the user to access the API."
    in: "header"
    type: "apiKey"

  APIUserKey:
    name: "authorization-key"
    description: "The key of the user to access the API."
    in: "header"
    type: "apiKey"
